// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void startWorker(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FfiSchedule>)>>
        publishSolution,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> notifyStopped,
    FfiProblem problem,
  ) {
    return _startWorker(
      publishSolution,
      notifyStopped,
      problem,
    );
  }

  late final _startWorkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<FfiSchedule>)>>,
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
              FfiProblem)>>('startWorker');
  late final _startWorker = _startWorkerPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FfiSchedule>)>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          FfiProblem)>();

  void stopWorker() {
    return _stopWorker();
  }

  late final _stopWorkerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stopWorker');
  late final _stopWorker = _stopWorkerPtr.asFunction<void Function()>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;

class FfiFraction extends ffi.Struct {
  @ffi.Int64()
  external int numerator;

  @ffi.Int64()
  external int denominator;
}

class i2fracEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  external FfiFraction value;
}

class i2frac extends ffi.Struct {
  @ffi.Int32()
  external int size;

  external ffi.Pointer<i2fracEntry> entries;
}

class i2iEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  @ffi.Int64()
  external int value;
}

class i2i extends ffi.Struct {
  @ffi.Int32()
  external int size;

  external ffi.Pointer<i2iEntry> entries;
}

class i2i2iEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  external i2i value;
}

class i2i2i extends ffi.Struct {
  @ffi.Int32()
  external int size;

  external ffi.Pointer<i2i2iEntry> entries;
}

abstract class MachineType {
  static const int REACTION_ = 0;
  static const int MANUFACTURING_ = 1;
}

/// / Schedule
class batchItem extends ffi.Struct {
  @ffi.Int32()
  external int runs;

  @ffi.Int32()
  external int slots;

  external FfiFraction time;
}

class i2batchItemEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  external batchItem value;
}

class batch extends ffi.Struct {
  @ffi.Int64()
  external int startTime;

  @ffi.Int32()
  external int size;

  external ffi.Pointer<i2batchItemEntry> entries;
}

class batchList extends ffi.Struct {
  @ffi.Int32()
  external int size;

  external ffi.Pointer<batch> entries;
}

class k2batchesEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  external batchList value;
}

class k2batches extends ffi.Struct {
  @ffi.Int32()
  external int size;

  external ffi.Pointer<k2batchesEntry> entries;
}

class FfiSchedule extends ffi.Struct {
  external k2batches machine2batches;

  @ffi.Double()
  external double time;

  @ffi.Int32()
  external int optimal;

  @ffi.Int32()
  external int infeasible;
}

class FfiProblem extends ffi.Struct {
  external i2i runsExcess;

  external i2i madePerRun;

  external i2i timePerRun;

  external i2i job2machine;

  external i2i2i dependencies;

  external i2i inventory;

  external i2i maxNumSlotsOfMachine;

  external i2i maxNumSlotsOfJob;

  external i2i maxNumRunsPerSlotOfJob;

  external i2frac materialBonus;

  external i2frac timeBonus;

  @ffi.Int64()
  external int float2int;

  external ffi.Pointer<FfiSchedule> approximation;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;
