// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void startWorker(
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FfiSchedule> x)>>
        publishSolution,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> notifyStopped,
    FfiProblem problem,
  ) {
    return _startWorker(
      publishSolution,
      notifyStopped,
      problem,
    );
  }

  late final _startWorkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<FfiSchedule> x)>>,
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
              FfiProblem)>>('startWorker');
  late final _startWorker = _startWorkerPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<FfiSchedule> x)>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          FfiProblem)>();

  void stopWorker() {
    return _stopWorker();
  }

  late final _stopWorkerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stopWorker');
  late final _stopWorker = _stopWorkerPtr.asFunction<void Function()>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class FfiFraction extends ffi.Struct {
  @ffi.Int64()
  external int numerator;

  @ffi.Int64()
  external int denominator;
}

final class i2fracEntry extends ffi.Struct {
  @ffi.Int()
  external int key;

  external FfiFraction value;
}

final class i2frac extends ffi.Struct {
  @ffi.Int()
  external int size;

  external ffi.Pointer<i2fracEntry> entries;
}

final class i2iEntry extends ffi.Struct {
  @ffi.Int()
  external int key;

  @ffi.Int64()
  external int value;
}

final class i2i extends ffi.Struct {
  @ffi.Int()
  external int size;

  external ffi.Pointer<i2iEntry> entries;
}

final class i2i2iEntry extends ffi.Struct {
  @ffi.Int()
  external int key;

  external i2i value;
}

final class i2i2i extends ffi.Struct {
  @ffi.Int()
  external int size;

  external ffi.Pointer<i2i2iEntry> entries;
}

abstract class MachineType {
  static const int REACTION_ = 0;
  static const int MANUFACTURING_ = 1;
}

/// / Schedule
final class batchItem extends ffi.Struct {
  @ffi.Int()
  external int runs;

  @ffi.Int()
  external int slots;

  external FfiFraction time;
}

final class i2batchItemEntry extends ffi.Struct {
  @ffi.Int()
  external int key;

  external batchItem value;
}

final class batch extends ffi.Struct {
  @ffi.Int64()
  external int startTime;

  @ffi.Int()
  external int size;

  external ffi.Pointer<i2batchItemEntry> entries;
}

final class batchList extends ffi.Struct {
  @ffi.Int()
  external int size;

  external ffi.Pointer<batch> entries;
}

final class k2batchesEntry extends ffi.Struct {
  @ffi.Int32()
  external int key;

  external batchList value;
}

final class k2batches extends ffi.Struct {
  @ffi.Int()
  external int size;

  external ffi.Pointer<k2batchesEntry> entries;
}

final class FfiSchedule extends ffi.Struct {
  external k2batches machine2batches;

  @ffi.Double()
  external double time;

  @ffi.Int()
  external int optimal;

  @ffi.Int()
  external int infeasible;
}

final class FfiProblem extends ffi.Struct {
  external i2i runsExcess;

  external i2i madePerRun;

  external i2i timePerRun;

  external i2i job2machine;

  external i2i2i dependencies;

  external i2i inventory;

  external i2i maxNumSlotsOfMachine;

  external i2i maxNumSlotsOfJob;

  external i2i maxNumRunsPerSlotOfJob;

  external i2frac materialBonus;

  external i2frac timeBonus;

  @ffi.Int64()
  external int float2int;

  external ffi.Pointer<FfiSchedule> approximation;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;
